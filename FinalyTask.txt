Всем привет ;)
Вот и “финальное” задание. Цель - создать собственное веб-приложение с возможностью авторизации пользователей и менеджмента их собственных компаний.
Ознакомьтесь с заданием, если будут вопросы - задавайте в чате.


Front-end part


Пишем простое SPA-приложение. Из технологий React + Redux + Thunk или Vue + Vuex (Внизу будет указан список по фамилиям). Верстка и стили должны быть приемлемыми (не ломаные, не кривые) но на ваше усмотрение какой ui вы организуете.
По структуры приложения:
1)         Должно включать signup, login, companies, company, profile, *admin views
страницы и роуты.
2)         Незалогиненый пользователь не может попасть в систему и так же не может зайти на роуты кроме signup и login.
3)         Signup и Signin страницы - представляют из себя форму заполнения
данных и отправки на сервер.
--- Поля для signup формы - email и password, phone number, last name, first name, nickname, description, position.
--- Поля для signin формы - email и password.
--- Все они должны иметь базовую валидацию - т.е. быть обязательно заполненными. Поле Email должно пропускать только email формат.
4)        Сompanies - таблица компаний. Сортировка должна происходить на серверной стороне по Name, Service и Number of employees полям. Также пользователь должен иметь возможность просмотреть детальную информацию о компании, перейти на нее и обратно к списку. Должна соблюдаться связь один ко многим - пользователь может иметь много компаний. Плюс каждый пользователь имеет возможность видеть только свои компании.
5)         Сompany - отображается детальная информация компании с возможностью редактирования. Каждый из пользователей имеет возможность редактировать только свою компанию.
--- Поля для компании: Name, Address, Service of activity, Number of employees, Description, Type.
6)         Create Сompany - форма создания компании (Name, Address, Service of activity, Number of employees, Description, Type). Форма должна иметь базовую валидацию.
7)         Profile - страница пользователя, с возможностью редактирования.
8)         Logout - кнопка при нажатие - происходит разлогинивание пользователя.
*9)       Admin view - в системе должен быть минимум один админ (те должна присутствовать система ролей - админ и обыкновенный пользователь). В данное представление должны входить 3 страницы :
-  Admin profile - страница адина (по факту тот же что и обычный профайл)
-  User list - список всех пользователей в системе(c возможностью редактирования)
-  Company list - список всех компаний в системе (c возможностью редактирования) 

Дизайн и организация UI ничем не ограничена и зависит только от вашей фантазии. Так что следуйте чувствам собственного внутреннего дизайнера :)



Back-end part


Тут ничем не сложнее:) Пишем простой RESTful сервер в связке NodeJS + Nest + PostgreSQL. Используем базовую авторизацию bearer jwt-token подход (для этого достаточно использовать https://github.com/jaredhanson/passport). Должен быть настроен CORS и body-parser. Система ролей и миделваров.


Продолжительность жизни токена - 2 час. На момент истечения жизни токена разлогинивать пользователя.

API:


1) Request и response всегда в json формате.
2) /signup [POST] - регистрация нового пользователя:


Поля email и password, phone_number, last_name, first_name, nick_name, description, position. Юзеры должны быть уникальны.

3) /signin [POST] - по email и password, в респонсе получать сгенерированный bearer токен для дальнейшего его использования.

4) /profile [GET] - возвращает информацию пользователя.


6) /logout [GET].


7) Дальнейшие эндпоинты пишите ВЫ сами;) А именно будет существовать сущность companies, users и тд. Пользователь должен иметь возможность создавать/удалять/обновлять/получать компании. Так же, получать как весь список так и одну выбранную компанию. Пользователь должен получать только свои компании!
* Доп задачка - При получению всех companies сортировать в обратном порядке - DESC.


Пользоваться можете любыми источниками какими пожелаете. Главное реализовать основную часть приложения. Старайтесь думать, а не просто копировать. Дополнительные реализации в поведении приложения и дизайне только приветствуются.

Прежде чем отправить на проверку перепроверьте внимательно 
Весь код должен быть в гите. По окончанию, всю работу скидывайте своему куратору и дублируйте в телеграмм канал ссылку на гит и ключевое слово - !!!DONE!!!

---------------------------------------------------------------------------------------------------------------- И самое главное - на все про все 2 недели, дата старта с 18.11.2020 по
01.12.2020 (включительно).
* - доп. задачки, кто сделает будет большим молодцом.
Основная задача - сделать качественно, а не все и абы как. Так что НЕ спешите, НЕ паникуйте. Сделать меньше но правильней. Кто сделает все и правильно будет двойным большим молодцом :)
